#created on: 17-May-2012
package uk.ac.imperial.lpgdash

#list any import classes here.
import java.util.List
import java.lang.Math
import java.lang.Double
import uk.ac.imperial.presage2.core.Action
import uk.ac.imperial.presage2.rules.facts.Agent
import uk.ac.imperial.lpgdash.RoundType
import uk.ac.imperial.lpgdash.actions.*
import uk.ac.imperial.lpgdash.facts.*
import org.apache.commons.math.stat.descriptive.SummaryStatistics
import uk.ac.imperial.presage2.core.db.StorageService
import uk.ac.imperial.presage2.core.util.random.Random

global org.apache.log4j.Logger logger
global uk.ac.imperial.presage2.core.db.StorageService storage

declare Round
	@role( event )
end

declare Provision
	@role( event )
end

declare Demand
	@role( event )
end

declare Generate
	@role( event )
end

declare Allocate
	@role( event )
end

declare Appropriate
	@role( event )
end

declare JoinCluster
	@role( event )
end

declare LeaveCluster
	@role( event )
end

declare ProvisionPool
	cluster: Cluster @key
	quantity: double
end

declare AllocationPool
	cluster: Cluster @key
	quantity: double
end

declare Processed
	@role( event )
	act: Object @key
end

declare IsHead
	@role( event )
	player : Player		@key
	cluster : Cluster	@key
	time : int 			@key
end

rule "Discard Rounds"
	salience 1000
	when
		$r : Round( $n : number )
		$r2 : Round( number < $n )
	then
		logger.info($r);
		retract( $r2 );
end

rule "Discard Rounds intermediate"
	salience 1000
	when
		$r : Round( $n : number, type == RoundType.APPROPRIATE )
		$r2 : Round( number == $n, type == RoundType.DEMAND )
	then
		logger.info($r);
		retract( $r2 );
end

rule "Init Provision Pool"
	when
		$c : Cluster( )
		not( ProvisionPool( cluster == $c ) )
	then
		insert(new ProvisionPool( $c, 0 ) );
end

rule "Init Allocation Pool"
	when
		$c : Cluster( )
		not( AllocationPool( cluster == $c ) )
	then
		insert(new AllocationPool( $c, 0 ) );
end

rule "AllocationPool mirrors ProvisionPool increases"
	when
		$c : Cluster( )
		$p : ProvisionPool( cluster == $c, $pq : quantity )
		$a : AllocationPool( cluster == $c, $aq : quantity, quantity < $pq )
	then
		modify($a) {
			setQuantity($pq);
		}
end

rule "Accumulate Provisions"
	salience 10
    when
		$r : Round( type == RoundType.DEMAND )
		$c : Cluster( )
		$provision : Provision( this coincides $r )
		$pool : ProvisionPool( cluster == $c )
		not( Processed( $provision ;) )
    then
    	modify($pool) {
    		setQuantity($pool.getQuantity() + $provision.getQuantity());
    	}
    	insert( new Processed( $provision ) );
        logger.info( $provision  +" pool is now "+ $pool);
end

rule "Process Demand"
	salience 10
	when
		$r : Round( type == RoundType.DEMAND )
		$d : Demand( this coincides $r, $p : player, $q : quantity )
		not( Processed( $d ;) )
	then
		modify($p) {
			setD($q);
		}
		insert( new Processed( $d ) );
		logger.info($d);
end

rule "Set g and q"
	when
		$action : Generate( $p : player, $g : g, $q : q)
		not( Processed( $action ;) )
	then
		modify($p) {
			setG( $g ),
			setQ( $q );
		}
		insert( new Processed( $action ) );
		logger.info($action);
end

rule "Process Allocations"
	when
		$a : Allocate( $p : player, $q : quantity )
		not Processed( $a ;) 
	then
		logger.info("Processing allocation: "+ $a );
		modify($p) {
			setAllocated($q);
		}
		insert( new Processed( $a ) );
end

rule "Process Appropriate"
	salience -5
	when
		$a : Appropriate( $player : player, $q : quantity )
		not Processed( $a ;)
		MemberOf( player == $player, $c : cluster )
		$pool : AllocationPool( cluster == $c )
	then
		double canTake = Math.min( $pool.getQuantity(), $q );
		modify($player) {
			setAppropriated(canTake);
		}
		modify($pool) {
			setQuantity( $pool.getQuantity() - canTake );
		}
		insert( new Processed( $a ) );
		logger.info("Processing appropriate: "+ $a);
end

rule "Join cluster"
	when
		$j : JoinCluster( $c : cluster, $p : player )
		not MemberOf( player == $p )
		not Processed( $j ;)
	then
		insert( new MemberOf( $p, $c ) );
		insert( new Processed( $j ) );
		logger.info("Joined cluster: "+ $p );
end

rule "Leave cluster"
	when
		$a : LeaveCluster( $c : cluster, $p : player )
		$m : MemberOf( cluster == $c, player == $p )
		not Processed( $a ;)
	then
		retract( $m );
		insert( new Processed( $a ) );
		logger.info("Left cluster: "+ $p );
end

rule "Assign cluster head"
	salience -1
	no-loop
	when
		$c : Cluster( )
		$members : List(size > 0) from accumulate(
			$p : Player( ) and
			MemberOf( cluster == $c, player == $p )
			, collectList( $p )
		)
		not( exists( Player( role == Role.HEAD ) from $members ) )
	then
		Player randomMember =  (Player) $members.get( Random.randomInt( $members.size() ) );
		logger.info("New head: "+ randomMember);
		randomMember.setRole( Role.HEAD );
		//insert( new IsHead( randomMember, $c ) );
end

rule "Cluster head event"
	no-loop
	salience -2
	when
		Round( type == RoundType.DEMAND, $t : number )
		$p : Player( role == Role.HEAD )
		$c : Cluster( )
		MemberOf( player == $p, cluster == $c )
		not( IsHead( player == $p, cluster == $c, time == $t ) )
	then
		IsHead e = new IsHead( $p, $c, $t );
		logger.info(e);
		insert( e );
end

rule "Unassign cluster head after 20 rounds"
	when
		$p : Player( role == Role.HEAD )
		$h : List( size > 0, size % 20 == 0 ) from collect( IsHead( player == $p ) over window:time( 50s ) )
	then
		modify($p) {
			setRole( Role.PROSUMER )
		}
		logger.info("No longer cluster head: "+ $p );
end

rule "Surplus allocated pool"
	salience -100
	no-loop
	when
		$r : Round( type == RoundType.APPROPRIATE )
		$c : Cluster( )
		$a : AllocationPool( )
		not( Processed( $a ;) )
	then
		logger.info($a.getQuantity() +" pool surplus");
		modify($a) {
			setQuantity(0);
		}
		insertLogical( new Processed( $a ) );
end

rule "Calculate round fairness"
	salience -99
	when
		$r : Round( type == RoundType.DEMAND )
		$c : Cluster( $fairness : fairnessData )
		$members : List(size > 0) from accumulate( MemberOf( cluster == $c, $p : player ), collectList( $p ) )
		$allocations : List(size > 0) from accumulate( 
			Demand( $t : t, player memberOf $members, $p : player, $d : quantity, quantity > 0)
			and
			Allocate( t == $t, player == $p, $a : quantity ),
			collectList( $a / $d )
		)
	then
		for( Object v : $allocations ) {
			$fairness.addValue( Math.min(((Number) v).doubleValue(), 1) );
		}
		if (storage != null) {
			storage.getSimulation().getEnvironment().setProperty("c"+ $c.getId() +"-fairness",
					$r.getNumber() + 1,
					Double.toString($fairness.getStandardDeviation()));
		}
end
